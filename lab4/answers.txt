# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Yuanjie Li 
Student ID: 804126110
Email: yuanjie.li@cs.ucla.edu

# Partner 2 (if you're working in a team)
Name: Hongyi Wang
Student ID: 404191739
Email: hywang@cs.ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We apply asynchronous I/O by calling select() function. We parallel download first, then parallel upload. We don't parallel download with upload.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
When we receive more than TASKBUFSIZ, current implementation of buffer has overflow problem. So we keep a counter for current bytes in buffer. If it is larger than TASKBUFSIZ, buffer overflow happens

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
Fixed the bug that filename may be longer than FILENAMESIZ.
Fixed the bug that file may not exist in current directory.
Fixed the bug that attacker can sends arbirary large file, which wastes the computer resource. Since RPC does not provide the field for file size, we can only set a threshold (e.g. 1MB) for detecting such attack.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
Attack 1(evil_mode==1): data DoS attack, in which when the client asks for data, our program sends infinite number of fake data to client. This attack would exhaust client's disk, and block other valid requests. 

Attack 2(evil_mode==2): request DoS attack, in which the program would first contact tracker and send a valid request, then the tracker replies valid client's address. Then we send huge numbers of "junk requests" to client, in which the file does not exist. Since the skeleton processes requests in sequential, this attack would block other valid requests.

# Extra credit problems
Extra credit problem: we implemented integrity check, which can detect corrupted data. In our implementation, the corrupted data would be deleted.

# Add any other information you'd like us to know below this line.
